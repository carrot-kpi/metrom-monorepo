import { existsSync, writeFileSync, rmSync } from "node:fs";
import { dirname, join } from "node:path";
import { DEPLOYMENTS, SupportedAmm, SupportedNetwork } from "../deployments";
import { fileURLToPath } from "node:url";
import { exec } from "node:child_process";

const [, , rawNetwork = "", rawAmm = ""] = process.argv;
const network = rawNetwork.toLowerCase();
const amm = rawAmm.toLowerCase();

const networkConfig =
    network === "placeholder"
        ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
          ({} as any)
        : DEPLOYMENTS[network as SupportedNetwork];
if (!networkConfig) {
    console.error(
        `"${network}" is not a valid network. Valid values are: ${Object.keys(DEPLOYMENTS).join(", ")}`,
    );
    process.exit(1);
}

const contracts =
    amm === "placeholder"
        ? {
              Factory: {
                  address: "0x0000000000000000000000000000000000000000",
                  startBlock: -1,
              },
              NonFungiblePositionManager: {
                  address: "0x0000000000000000000000000000000000000000",
                  startBlock: -1,
              },
          }
        : networkConfig[amm as SupportedAmm];
if (!contracts) {
    console.error(
        `"${amm}" is not a valid amm for the network ${network}. Valid values are: ${Object.keys(networkConfig).join(", ")}`,
    );
    process.exit(1);
}

console.log(
    `Generating addresses.ts file for network ${network} and AMM ${amm}`,
);

let addressesFile =
    '// this file is automatically generated by the /scripts/generate-addresses-files.ts\n// script, do not edit this manually\n\nimport { Address } from "@graphprotocol/graph-ts";\n\n';
addressesFile += `export const FACTORY_ADDRESS = Address.fromString("${contracts.Factory.address}");\n`;
addressesFile += `export const NON_FUNGIBLE_POSITION_MANAGER_ADDRESS = Address.fromString("${contracts.NonFungiblePositionManager.address}");\n`;

try {
    const addressesFileOut = join(
        fileURLToPath(dirname(import.meta.url)),
        "../src/addresses.ts",
    );
    if (existsSync(addressesFileOut)) rmSync(addressesFileOut);
    writeFileSync(addressesFileOut, addressesFile);
    console.log("Addresses file successfully generated.");
} catch (error) {
    console.error("Error while generating addresses file", error);
    process.exit(1);
}

console.log(
    `Generating networks.ts file for network ${network} and AMM ${amm}`,
);

try {
    const networksFileOut = join(
        fileURLToPath(dirname(import.meta.url)),
        "../networks.json",
    );
    if (existsSync(networksFileOut)) rmSync(networksFileOut);
    writeFileSync(
        networksFileOut,
        JSON.stringify({ [network]: contracts }, undefined, 4),
    );
    console.log("Networks file successfully generated.");
} catch (error) {
    console.error("Error while generating networks file", error);
    process.exit(1);
}

exec("pnpm format");

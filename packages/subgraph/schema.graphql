type Token @entity(immutable: true) {
    id: Bytes!
    symbol: String!
    name: String!
    decimals: BigInt!
}

type Transaction @entity(immutable: true) {
    id: Bytes!
    blockNumber: BigInt!
    timestamp: BigInt!
    initializeEvent: InitializeEvent! @derivedFrom(field: "transaction")
    createCampaignEvent: CreateCampaignEvent! @derivedFrom(field: "transaction")
    distributeRewardEvent: DistributeRewardEvent!
        @derivedFrom(field: "transaction")
    claimRewardEvent: ClaimRewardEvent! @derivedFrom(field: "transaction")
    claimFee: ClaimFeeEvent! @derivedFrom(field: "transaction")
    transferOwnershipEvents: [TransferOwnershipEvent!]!
        @derivedFrom(field: "transaction")
    acceptOwnershipEvents: [AcceptOwnershipEvent!]!
        @derivedFrom(field: "transaction")
    setUpdaterEvents: [SetUpdaterEvent!]! @derivedFrom(field: "transaction")
    setFeeEvents: [SetFeeEvent!]! @derivedFrom(field: "transaction")
    setMinimumCampaignDuration: [SetMinimumCampaignDurationEvent!]!
        @derivedFrom(field: "transaction")
}

type Metrom @entity {
    id: Bytes!
    transaction: Transaction!
    owner: Bytes!
    pendingOwner: Bytes!
    updater: Bytes!
    fee: BigInt!
    minimumCampaignDuration: BigInt!
    campaignsAmount: BigInt!

    claimableFees: [ClaimableFee!]! @derivedFrom(field: "metrom")
    campaigns: [Campaign!]! @derivedFrom(field: "metrom")

    initializeEvent: InitializeEvent! @derivedFrom(field: "metrom")
    createCampaignEvent: CreateCampaignEvent! @derivedFrom(field: "metrom")
    distributeRewardEvent: DistributeRewardEvent! @derivedFrom(field: "metrom")
    claimRewardEvent: ClaimRewardEvent! @derivedFrom(field: "metrom")
    claimFee: ClaimFeeEvent! @derivedFrom(field: "metrom")
    transferOwnershipEvents: [TransferOwnershipEvent!]!
        @derivedFrom(field: "metrom")
    acceptOwnershipEvents: [AcceptOwnershipEvent!]!
        @derivedFrom(field: "metrom")
    setUpdaterEvents: [SetUpdaterEvent!]! @derivedFrom(field: "metrom")
    setFeeEvents: [SetFeeEvent!]! @derivedFrom(field: "metrom")
    setMinimumCampaignDuration: [SetMinimumCampaignDurationEvent!]!
        @derivedFrom(field: "metrom")
}

type ClaimableFee @entity {
    id: Bytes!
    metrom: Metrom!
    token: Token!
    amount: BigInt!
}

type InitializeEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    owner: Bytes!
    updater: Bytes!
    fee: BigInt!
    minimumCampaignDuration: BigInt!
}

type CreateCampaignEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    campaign: Campaign!
    chainId: BigInt!
    owner: Bytes!
    pool: Bytes!
    from: BigInt!
    to: BigInt!
    specification: Bytes!
    rewardTokens: [Bytes!]!
    rewardAmounts: [BigInt!]!
    feeAmounts: [BigInt!]!
}

type DistributeRewardEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    campaign: Campaign!
    root: Bytes!
    data: Bytes!
}

type ClaimRewardEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    campaign: Campaign!
    token: Token!
    amount: BigInt!
    receiver: Bytes!
}

type ClaimFeeEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    token: Token!
    amount: BigInt!
    receiver: Bytes!
}

type TransferOwnershipEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    owner: Bytes!
}

type AcceptOwnershipEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    owner: Bytes!
}

type SetUpdaterEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    updater: Bytes!
}

type SetFeeEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    fee: BigInt!
}

type SetMinimumCampaignDurationEvent @entity(immutable: true) {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    minimumCampaignDuration: BigInt!
}

type Campaign @entity {
    id: Bytes!
    transaction: Transaction!
    metrom: Metrom!
    chainId: BigInt!
    pool: Bytes!
    from: BigInt!
    to: BigInt!
    specification: Bytes!
    root: Bytes!
    data: Bytes!

    rewards: [Reward!]! @derivedFrom(field: "campaign")

    createEvent: CreateCampaignEvent! @derivedFrom(field: "campaign")
    distributeRewardEvents: [DistributeRewardEvent!]!
        @derivedFrom(field: "campaign")
    claimRewardEvents: [ClaimRewardEvent!]! @derivedFrom(field: "campaign")
}

type Reward @entity {
    id: Bytes!
    campaign: Campaign!
    token: Token!
    amount: BigInt!
    unclaimed: BigInt!
}
